@page "/Users"
@using System.Text.Json;
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Users</PageTitle>

<h1>Users</h1>


@if (users.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{


    <table class="table">
        <thead>
            <tr>
             
                <th>FullName</th>
                <th>Email</th>
                <th>Role</th>
                <th>Active</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in users)
            {
                <tr>
                   
                    <td>@item.FullName </td>
                    <td>@item.Email</td>
                    <td>@item.Role</td>
                    <td>@item.Active</td>
                    <td>
                        <button class="btn btn-dark" @onclick="() => EditUser(item.Id)">Edit</button>
                        <button class="btn btn-primary" @onclick="() =>ChangePassword(item.Id)">Change Password</button>
                        @if (item.Role.ToLower() != "admin")
                        {
                            <button class="btn btn-danger" @onclick=" () => Delete(item.Id.ToString())">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        @if (currentPage > 1)
        {
            <button @onclick="() => ChangePage(--currentPage)">Previous</button>
        }
        @for (int i = 1; i <= count; i++)
        {
            int page = i;
            <button @onclick="() => ChangePage(page)">@i</button>

        }
        @{
            if (currentPage < count)
            {
                <button @onclick="() => ChangePage(++currentPage)">Next</button>
            }
        }

    </div>
}

@code {
    private int currentPage = 1;
    private int itemsPerPage = 10;
    private List<User> users = new List<User>();
    string jwtToken;
    int count = 0;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            string jsonString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
            var UserObject = JsonSerializer.Deserialize<JsonElement>(jsonString);
            jwtToken = UserObject.GetProperty("token").GetString();

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);
            UserDTO respons = await Http.GetFromJsonAsync<UserDTO>($"api/user/GetUsers?page=1&pageSize={itemsPerPage}");

            if (respons != null)
            {
                users = respons.users;
                if (respons.count > 0)
                    count = (int)(Math.Ceiling((double)respons.count / itemsPerPage));
            }

        }
        catch (Exception ex)
        {
            var error = ex.Message;
        }

    }

    private async Task Delete(string userId)
    {

        try
        {


            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);
            await Http.PostAsync($"api/user/DeleteUser?userId={userId}",null);

            var deletedItem = users.FirstOrDefault(item => item.Id.ToString() == userId);
            if (deletedItem != null)
            {
                users.Remove(deletedItem);
            }

        }
        catch (Exception ex)
        {
            var error = ex.Message;
        }
    }

    private void ChangePassword(Guid userId) => Navigation.NavigateTo($"/ChangePassword/{userId.ToString()}");
    private void EditUser(Guid userId) => Navigation.NavigateTo($"EditUser/{userId.ToString()}");
 

    private async Task ChangePage(int p)
    {

        try
        {
            currentPage = p;
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);
            UserDTO respons = await Http.GetFromJsonAsync<UserDTO>($"api/user/GetUsers?page={p}&pageSize={itemsPerPage}");

            if (respons != null)
            {
                users = respons.users;
            }

        }
        catch (Exception ex)
        {
            var error = ex.Message;
        }
    }

}

