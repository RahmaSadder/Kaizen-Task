@page "/EditUser/{userId}"
@using System.Text.Json;
@using CoreRepository.Enum;
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Edit User</PageTitle>

<h1>Edit User</h1>


<form @onsubmit="Edit">
    <div class="form-group">
        <label for="email">Email</label>
        <input type="email" id="email" @bind="user.Email"  class="form-control" required />
    </div>
    <div class="form-group">
        <label for="fullName">Full Name</label>
        <input type="text" id="fullName" @bind="user.FullName" class="form-control" required />
    </div>
    <div class="form-group">
        <label for="role">Role</label>
        <select id="role" @bind="user.Role" class="form-control" required>
            @foreach (var role in Enum.GetValues(typeof(UserRole)))
            {
                <option value="@role">@role</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="active">Active</label>
        <input type="checkbox" id="active" @bind="user.Active" />
    </div>
    <br />
    @if (!string.IsNullOrWhiteSpace(@notificationMessage))
    {
        <div class="notification  @(notificationType)">
            <button class="delete" @onclick="CloseNotification">x</button>
            <p class="@alertColor">  @notificationMessage </p>
        </div>
        <br />
    }
    <button type="submit" class="btn btn-primary">Save</button>
</form>



@code {

    //Notification
    private string notificationType = "";
    private string notificationMessage = "";
    private string alertColor = "";

    public void ShowNotification(string type, string message, string alert)
    {
        notificationType = type;
        notificationMessage = message;
        alertColor = alert;
    }

    private void CloseNotification()
    {
        notificationType = "";
        notificationMessage = "";
    }



    //OnInitializedAsync

 
    private string jwtToken;
    User? user = new User();
    protected override async Task OnInitializedAsync()
    {
        string jsonString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        var UserObject = JsonSerializer.Deserialize<JsonElement>(jsonString);
        jwtToken = UserObject.GetProperty("token").GetString();
     
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);
        user = await Http.GetFromJsonAsync<User>("api/user/GetUser?userId=" + userId);

    }


    [Parameter]
    public string? userId { get; set; }


    //Edit
    private async Task Edit()
    {
        try
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);
            var response = await Http.PostAsJsonAsync("api/auth/Register", user);

            if (response.IsSuccessStatusCode)
            {
                ShowNotification("success", "Edit successfully!", "alert-info");

            }
            else
            {
                ShowNotification("error", "error", "alert-danger");
            }
        }
        catch (Exception ex)
        {
            ShowNotification("error", ex.Message.ToString(), "alert-danger");
        }
    }



}

