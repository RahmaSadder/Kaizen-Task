@page "/Items/{wherhouseId}"
@using System.Text.Json;
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Items</PageTitle>

<h1>Items</h1>


@if (items.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{

@*    <button class="btn btn-outline-primary" @onclick="Add">Add New</button>
*@    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>SKU_Code</th>
                <th>Qty</th>
                <th>Cost_Price</th>
                <th>MSRP_Price</th>
                <th>Warehouse</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.Name </td>
                    <td>@item.SKU_Code</td>
                    <td>@item.Qty</td>
                    <td>@item.Cost_Price</td>
                    <td>@item.MSRP_Price</td>
                    <td>@item.Warehouse</td>
                    <td>
                        <button class="btn btn-danger" @onclick=" () => Delete(item.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        @if (currentPage > 1)
        {
            <button @onclick="() => ChangePage(--currentPage)">Previous</button>
        }
        @for (int i = 1; i <= count; i++)
        {
            int page = i;
            <button @onclick="() => ChangePage(page)">@i</button>

        }
        @{
            if (currentPage < count)
            {
                <button @onclick="() => ChangePage(++currentPage)">Next</button>
            }
        }

    </div>
}

@code {

    [Parameter]
    public string wherhouseId { get; set; }

    private int currentPage = 1;
    private int itemsPerPage = 10;
    private List<Item> items = new List<Item>();
    string jwtToken;
    int count = 0;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            string jsonString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
            var UserObject = JsonSerializer.Deserialize<JsonElement>(jsonString);
            jwtToken = UserObject.GetProperty("token").GetString();

            if (Int64.TryParse(wherhouseId, out long number))
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);
                ItemDTO respons = await Http.GetFromJsonAsync<ItemDTO>($"api/warehouse/GetItems?page=1&pageSize={itemsPerPage}&wherhouseId={number}");
                if (respons != null)
                {
                    items = respons.Items;
                    if (respons.count > 0)
                        count = (int)(Math.Ceiling((double)respons.count / itemsPerPage));
                }
            }

        }
        catch (Exception ex)
        {
            var error = ex.Message;
        }

    }
    //private void Add() => Navigation.NavigateTo("/NewItem");


    private async Task Delete(Int64 id)
    {
        try
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);
            await Http.PostAsync($"api/warehouse/DeleteItem?itemId={id}", null);

            var deletedItem = items.FirstOrDefault(item => item.Id == id);
            if (deletedItem != null)
            {
                items.Remove(deletedItem);
            }

        }
        catch (Exception ex)
        {
            var error = ex.Message;
        }
    }
    private async Task ChangePage(int p)
    {

        try
        {
            currentPage = p;
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);
            ItemDTO respons = await Http.GetFromJsonAsync<ItemDTO>($"api/warehouse/GetItems?page={p}&pageSize={itemsPerPage}");

            if (respons != null)
            {
                items = respons.Items;
            }

        }
        catch (Exception ex)
        {
            var error = ex.Message;
        }
    }





}

